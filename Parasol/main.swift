//
//  main.swift
//  Parasol
//
//  Created by Kyle McAlpine on 30/12/2015.
//  Copyright Â© 2015 Loot Financial Services Ltd. All rights reserved.
//

import Foundation

var xcodeProject: XcodeProject?
var target: String?

for i in 0...Process.arguments.count - 1 {
    let argument = Process.arguments[i]
    if argument == "--project" {
        if let path = Process.arguments[safe: i + 1], project = XcodeProject(url: NSURL(fileURLWithPath: path)) {
            xcodeProject = project
        } else {
            print("ERROR: --project option passed with no Xcode project exists at the given URL")
            exit(1)
        }
    }
}

guard let xcodeProject = xcodeProject ?? XcodeProject.findXcodeProjectInCurrentDirectory() else {
    print("Could not find Xcode project")
    exit(0)
}

let targets = xcodeProject.targets
print("Which target in \(xcodeProject.name):")
for i in 1...targets.count {
    print("\(i)) \(targets[i - 1].name)")
}
let input = readLine()
if let input = input, index = Int(input) where index - 1 >= 0 && index <= targets.count  {
    let target = targets[index - 1]
    if case let .Exists(profdataPath, executablePath) = target.coverageDataExists {
        if Process.arguments.contains("report") {
            if let report = try? CoverageReport(profdataPath: profdataPath, executablePath: executablePath) {
                for line in report.lines {
                    print(line)
                }
            }
        }
        if let analysis = try? CoverageAnalysis(profdataPath: profdataPath, executablePath: executablePath) {
            print(analysis.toJSON())
        }
    } else {
        print("Coverage data has not been generated. Would you like to run tests? (y/n)")
        let input = readLine()
        if input == "y" {
            target.runTests()
            if case let .Exists(profdataPath, executablePath) = target.coverageDataExists {
                if let analysis = try? CoverageAnalysis(profdataPath: profdataPath, executablePath: executablePath) {
                    print(analysis.toJSON())
                }
            } else {
                let errorMessage = "ERROR: Coverage data was not generated by Xcode."
                NSFileHandle.fileHandleWithStandardError().writeData(errorMessage.dataUsingEncoding(NSUTF8StringEncoding)!)
            }
        } else if input == "n" {
            
        }
    }
}

